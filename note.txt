Inheritance:
1. Constructor must be in called in the first line of a constructor with this or super keyword.
2. toString() method must be provided public.
3. Abstract class cannot be initialized.
4. Abstract class can have methods with body which will take effect if its subclasses don't overwrite them.
5. static variables is associated with a class not an instance
6. Static methods cannot be overwritten.
7. You don’t have to explicitly use the static keyword with a nested interface, since it is implicitly static.
8. It is not possible to declare a non-static inner interface.
9. You can pass only final variables to a local inner class.
10. Inner classes cannot have static declarations.
11. A constructor in an enum class can only be specified as private.
12. If you declare a data member in an interface, it should be initialized, and all such data members are implicitly treated as “public static final” members.
13. All methods in the java.util.math library are static
14. Variables in an Interface is public and static, methods in a Interface is either public or abstract. 
15. Regarding questions about has-a and is-a relationship, always focus on direct relationship. 
16. Enums are implicitly declared public, static, and final, which means you cannot extend them.
17. Overloading means same method name in the same class, overriding means same method name in inheritance hierarchy.
18. Comparing overloading and overriding:
Overriding                                              |Overloading
________________________________________________________|__________________________________________________________________
Should have the same argument list types (or compatible |Should not have same argument list types
types) as the base version.                             |
________________________________________________________|__________________________________________________________________
Should have the same return type or the return type can |You cannot overload methods with the methods differing in return 
be a subclass-covariant return types.                   |types alone.
________________________________________________________|__________________________________________________________________
Should not have a more restrictive access modifier than |You cannot overload methods with the methods differing in modifier 
the base version.                                       |alone.
________________________________________________________|__________________________________________________________________
Should not throw new or broader checked exceptions      |You cannot overload methods with the methods differing in exception 
                                                        |specifications alone.
________________________________________________________|__________________________________________________________________
19. Any field in an interface is implicitly declared public and static.

Generics and collections:
1. When you use wildcard parameters, you cannot call methods that modify the object.
2. The methods hashCode() and equals()need to be consistent for a class.
3. The second parameter of split() method defines the number of parts that will be divided.
4. \b will not work if the start and end of a string is not a word character.
Comparable                                              |Comparator
________________________________________________________|__________________________________________________________________
Used when the objects need to be compared in their      |Used when the objects need to be compared in custom 
natural order.                                          |user-defined order (otherthan the natural order).
________________________________________________________|__________________________________________________________________
You do not create a separate class just to implement    |You create a separate class just to implement the Comparator 
the Comparable interface                                |interface
________________________________________________________|__________________________________________________________________
For a given class type, you have only that class (and   |You can have many separate (i.e., independent) classes 
that class alone) implementing the Comparable interface |implementing the Comparatorinterface, with each class 
                                                        |defining different ways to compare objects.
________________________________________________________|__________________________________________________________________
The method in the Comparable interface is declared      |The method in the Comparatorinterface is declared as 
as int compareTo(ClassType type)                        |int compare(ClassType type1, ClassType type2)
________________________________________________________|__________________________________________________________________

Java I/O:
1. All class members will not be serialized if they are declared as “transit”.
2. whenever you make a change in a serialized class, do not forget to change the serialVersionUID also.
3. the class file of the object must be in the path of the destination machine, otherwise only the state of the object will be restored .
4. If a class is already serialized and you try to serialize it again, the JVM will not serialize it.
5. You can create your own protocol for serialization. For that, you just need to implement the Externalizable interface instead of the Serializable interface.
Character streams                                       |Byte streams
________________________________________________________|__________________________________________________________________
Meant for reading or writing to character- or           |Meant for reading or writing to binary data I/O such as
text-based I/O such as text files, text documents,      |executable files, image files, and files in low-level file formats
XML, and HTML files.                                    |such as .zip, .class, .obj, and .exe.
________________________________________________________|_________________________________________________________________
Data dealt with is 16-bit Unicode characters.           |Data dealt with is bytes (i.e., units of 8-bit data).
________________________________________________________|___________________________________________________________________
Input and output character streams are called           |Input and output byte streams are simply called input streams and output 
readers and writers, respectively.                      |streams, respectively. 
________________________________________________________|__________________________________________________________________
The abstract classes of Reader and Writer and           |The abstract classes of InputStream and OutputStream and their derived 
their derived classes in the java.io package            |classes in the java.io package provide support
provide support for character streams.                  |for byte streams.
________________________________________________________|___________________________________________________________________

Thread:
1. The sleep()method throws InterruptedException.
2. Can we use sleep() method to let main thread sleep for a while?
3. If the current thread invokes join() on an instance of another thread, then the current thread waits indefinitely for that other thread to die.
4.  If an exception gets thrown inside the synchronized block, the lock will be automatically released by the JVM.
5. With synchronized blocks, you can acquire a lock on a reference variable only. If you use a primitive type, you will get a compiler error.
6. The JVM ensures that only one thread can invoke a constructor call (for a specific constructor) at a given point in time. So, there is no need to declare a constructor synchronized.
7. While using synchronized keyword, the lock is obtained for an object not for a piece of code.
8. When you call start(), the thread moves to the new state. There is no proper state transition from the new state if you call start()again, so the JVM throws an IllegalThreadStateException.
9. The wait(int)method (with or without timeout value) should be called only after acquiring a lock
10. You cannot synchronized an interface or abstract method. 
11. CopyOnWriteArrayList class is used in concurrent case where a thread try to remove an empty ArrayList, it will wait until another thread add one element for that ArrayList

File I/O:
1. Even if two Path objects are pointing to the same file/directory, it is possible that equals() returns false. You need to make sure that both paths are absolute paths
2. If you move a symbolic link with File.move() method, the link itself will be moved, not the target file of the link. It is important to note that in the case of the copy() method, if you specify a symbolic link, the target of the link is copied, not the link itself.
3. "Relativize" method must be used with two same type file path. If path1 equals as "a/x" and path2 equals as "a/b", then path1.relativize(path2) will return value of "../b" which is the way from path1 to path2.
4. readline() method will return null if the program already reaches the bottom of the file content. 
 
Database:
1. Two-tier architecture and three-tier architecture consist of JDBC architecture.
2. There are 4 types of JDBC drivers: 
a. JDBC-ODBC driver
b. Native-API driver, e.g. ojdbc14.jar
c. Network-protocol JDBC (for three-tier architecture), e.g. http://www.javaworld.com/javaworld/jw-05-2002/jw-0517-jdbcdriver.html?page=1
d. Native-protocol driver, e.g. Oracle thin driver, IBM tool box

Design Principles:
1. Class inheritance implies an is-a relationship, interface inheritance implies an is-like-a relationship, and composition implies a has-a relationship.
2. favor composition over inheritance.
          |Non-Local                                                                                           |Local
__________|____________________________________________________________________________________________________|_____________________________________________________________________________________________________
Static    |The accessibility (public, protected,etc.) of the static nested class is defined by the outer class.|(Not possible)
          |The name of the static nested class is expressed with OuterClassName.NestedClassName syntax.        |
          |When you define an inner nested class (or interface) inside an interface, the nested class is       |
          | declared implicitly public and static. This point is easy to remember: any field in an interface is|
          | implicitly declared public and static, and static nested classes have this same behavior.          |
          |Static nested classes can be declared abstract or final.                                            |
          |Static nested classes can extend another class or it can be used as a base class.                   |
          |Static nested classes can have static members. (As you’ll see shortly, this statement does not apply|
          | to other kinds of nested classes.)                                                                 |
          |Static nested classes can access the members of the outer class (only static members, obviously).   |
          |The outer class can also access the members (even private members) of the nested class through an   |
          | object of nested class. If you don’t declare an instance of the nested class, the outer class      |
          | cannot access nested class elements directly.                                                      |
__________|____________________________________________________________________________________________________|_____________________________________________________________________________________________________
Non-Static|The accessibility (public, protected, etc.) of the inner class is defined by the outer class.       |You can create a non-static local class inside a body of code. Interfaces cannot have local
          |Just like top-level classes, an inner class can extend a class or can implement interfaces.         |classes, and you cannot create local interfaces. 
          |Similarly, an inner class can be extended by other classes, and an inner interface can be           |Local classes are accessible only from the body of the code in which the class is defined. The
          | implemented or extended by other classes or interfaces.                                            | local classes are completely inaccessible outside the body of the code in which the class is
          |An inner class can be declared final or abstract.                                                   | defined.
          |Inner classes can have inner classes, but you’ll have a hard time reading or understanding.         |You can extend a class or implement interfaces while defining a local class. 
          | such complex nesting of classes. (Meaning: Avoid them!)                                            |A local class can access all the variables available in the body of the code in which it is defined. 
          |                                                                                                    |You can pass only final variables to a local inner class.   
__________|____________________________________________________________________________________________________|_____________________________________________________________________________________________________
Anonymous |(Not possible)                                                                                      |Anonymous classes are defined in the new expression itself, so you cannot create multiple 
          |                                                                                                    | objects of an anonymous class.
          |                                                                                                    |You cannot explicitly extend a class or explicitly implement interfaces when defining an 
          |                                                                                                    | anonymous class. 
__________|____________________________________________________________________________________________________|_____________________________________________________________________________________________________
3. Modifier for an interface field can only be public, static or final.
4. Modifier for an interface method can only be public or abstract.

Localization
1. Four ways to create a Locale object. They are as follows.
Locale locale1 = new Local ("it","","");
Locale locale2 = Locale.forLanguagetag("it");
Locale locale3 = new Locale.Builder().setLanguageTag("it").build();
Locale locale4 = Locale.ITALIAN;

